class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummyHead = new ListNode(0); // To hold the result
        ListNode current = dummyHead; // To keep track of the last node in the result
        int carry = 0; // To handle carryover during addition
        
        // Traverse both lists
        while (l1 != null || l2 != null || carry != 0) {
            int sum = carry; // Start with carry from previous step
            
            if (l1 != null) {
                sum += l1.val; // Add the value from l1 if available
                l1 = l1.next; // Move to the next node in l1
            }
            
            if (l2 != null) {
                sum += l2.val; // Add the value from l2 if available
                l2 = l2.next; // Move to the next node in l2
            }
            
            carry = sum / 10; // Calculate the new carry
            current.next = new ListNode(sum % 10); // Create the new node for the current digit
            current = current.next; // Move to the next node in the result list
        }
        
        return dummyHead.next; // Return the next node after dummy node (which is the start of the result)
    }
}
