import java.ut
class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashMap<Character, Integer> lastIndex = new HashMap<>();
        int maxLen = 0;
        int start = 0; // Start index of the current window

        for (int i = 0; i < s.length(); i++) {
            char currentChar = s.charAt(i);

            if (lastIndex.containsKey(currentChar)) {
                // Move the start pointer only if it's behind the last occurrence of the current character
                start = Math.max(start, lastIndex.get(currentChar) + 1);
            }

            lastIndex.put(currentChar, i); // Update the last seen index of the current character
            maxLen = Math.max(maxLen, i - start + 1); // Update the max length if needed
        }

        return maxLen;
    }
}
